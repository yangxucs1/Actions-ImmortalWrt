#
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: 编译固件

permissions: write-all
#开启写权限，防止无法上传到release

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      enable_ssh:           # 参数名称，用于在工作流中引用
        description: "Enable SSH debugging (true/false)"    # 描述信息，显示在手动触发界面
        required: true      # 是/否为必填项（true/false）
        default: "false"    # 默认不开启SSH，如需开启SSH连接，在Run Workflow时把SSH connection to Actions的值改为true
        type: choice        # 输入类型为下拉选择框
        options:            # 下拉框选则内容
          - "true"          # 开启SSH调试
          - "false"         # 关闭SSH调试

  #schedule:                #定时触发（当前已注释掉，需启用可删除#）
  #  - cron: 0 20 * * 4     
     #      分,时,日,月,周。每周五 20时执行一次 (UTC时间)

env:                                                      #定义环境变量，修改时需要注意:(冒号)后面有空格
  FREE_DISK_SH: scripts/free_disk_space.sh                #清理空间脚本
  ENV_SH: scripts/init_build_environment.sh               #安装编译依赖工具脚本
  SETTINGS_SH: scripts/init-settings.sh                   #自定义设置脚本，如：更改源码中路由器管理 IP 地址
  PACKAGES_SH: scripts/packages.sh                        #添加自定义软件仓库脚本
  CLASH_CORE_SH: scripts/preset-clash-core-amd64.sh
  REPO_URL: https://github.com/immortalwrt/immortalwrt    #源码仓库地址，通过变更仓库地址达到编译不同的固件
  REPO_BRANCH: master                                     # 修改 REPO_BRANCH 来达到更改分支版本,如：openwrt-24.10
  #CONFIG_FILE:               #编译配置文件路径(当前已注释掉，需启用可删除#)
  UPLOAD_BIN_DIR: false       #是否上传bin目录
  UPLOAD_FIRMWARE: true       # 是否上传最终固件
  UPLOAD_RELEASE: false       #是否将固件发布为Release
  UPLOAD_DL_DIR: false        #是否上传dl目录
  UPLOAD_config_DIR: false    #是否上传.config目录
  TZ: Asia/Shanghai           #设置时区

jobs:
  build:
    runs-on: ubuntu-latest    #虚拟机运行环境，如：ubuntu-24.04
   
    steps:
    - name: 准备
      uses: actions/checkout@main

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive           #禁用交互式提示，软件包安装过程使用默认配置
      run: |
        chmod +x $FREE_DISK_SH && $FREE_DISK_SH   #赋予脚本可执行权限并运行该脚本
        sudo -E apt-get -qq update -y
        sudo -E apt-get -qq full-upgrade -y
        chmod +x $ENV_SH && $ENV_SH
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune -a -f
        sudo docker container prune -f
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir                    #创建工作目录
        sudo chown $USER:$GROUPS /workdir         #设置目录权限从默认的 root 改为当前用户

    - name: 检查空间使用情况1
      if: (!cancelled())
      run: df -hT

    - name: 克隆源码
      working-directory: /workdir
      run: |
        git clone $REPO_URL --depth 1 -b $REPO_BRANCH openwrt     #克隆源码仓库
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt         #创建软链接

    - name: 设置 VERSION 环境变量
      run: echo "VERSION=${REPO_BRANCH#*-}" >> $GITHUB_ENV

    - name: 开启缓存
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'    # 启用 ccache 缓存
        mixkey: '${{ env.VERSION }}_X86-64'           #定义缓存标识
        prefix: ${{ github.workspace }}/openwrt       #指定源码根目录路径

    - name: 添加自定义软件仓库
      run: |
        cd openwrt
        chmod +x $GITHUB_WORKSPACE/$PACKAGES_SH && $GITHUB_WORKSPACE/$PACKAGES_SH        

    - name: 更新软件包
      run: |
        cd openwrt
        ./scripts/feeds update -a

    - name: 安装软件包前删除冲突的插件
      run: |
        cd openwrt
        rm -rf feeds/smpackage/{base-files,dnsmasq,firewall*,fullconenat,libnftnl,nftables,ppp,opkg,ucl,upx,vsftpd*,miniupnpd-iptables,wireless-regdb}

    - name: 安装软件包
      run: |
        cd openwrt
        ./scripts/feeds install -a

    - name: 执行自定义设置（改IP地址等）
      run: |
        cd openwrt
        chmod +x $GITHUB_WORKSPACE/$SETTINGS_SH && $GITHUB_WORKSPACE/$SETTINGS_SH
        chmod +x $GITHUB_WORKSPACE/$CLASH_CORE_SH && $GITHUB_WORKSPACE/$CLASH_CORE_SH

    - name: SSH远程连接服务器在线配置固件
      id: ssh
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: false      #关闭权限限制（不推荐）
      if: ${{ github.event.inputs.enable_ssh == 'true' }}   #仅当在Run Workflow时把SSH connection to Actions的值改为"true"时才开启SSH
      #当出现类似“ssh Y26QeagDtsPXp2mT6me5cnMRd@nyc1.tmate.io”字样时，复制 SSH 连接命令粘贴到终端内执行，或者复制链接在浏览器中打开使用网页终端。
      #然后输入：cd openwrt && make menuconfig
      #完成后按Ctrl+D组合键或执行exit命令退出，后续编译工作将自动进行。

    - name: 下载编译依赖dll
      id: download-dll
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        make download -j8

    - name: 检查空间使用情况2
      if: (!cancelled())
      run: df -hT

    - name: 开始编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        make json_overview_image_info
        make checksum
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 检查空间使用情况3
      if: (!cancelled())
      run: df -hT

    - name: 上传 bin 目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 上传 dl 目录
      uses: actions/upload-artifact@main
      if: env.UPLOAD_DL_DIR == 'true'
      with:
        name: OpenWrt_dl${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/dl 

    - name: 整理固件文件夹
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 删除以前的工作流程
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2
