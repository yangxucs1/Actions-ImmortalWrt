name: 单独发布固件
on: workflow_dispatch  # 仅手动触发

jobs:
  release-all:
    runs-on: ubuntu-latest
    steps:
      - name: 下载版本信息
        uses: actions/download-artifact@v4
        with:
          path: version-info-all
          pattern: version_info*
      - name: 提取版本和目标信息
        id: extract_version_target
        run: |
          # 创建合并后的版本信息文件
          echo "所有版本和目标设备信息汇总" > version-info-all.txt
          echo "==========================================" >> version-info-all.txt
          
          VERSIONS=()
          TARGETS=()
          
          # 遍历所有版本信息文件并合并内容
          for file in $(find version-info-all -type f -name "version_target_*.txt"); do
            if [ -f "$file" ]; then
              # 将单个文件内容追加到合并文件
              cat "$file" >> version-info-all.txt
              echo "==========================================" >> version-info-all.txt
              # 提取版本和目标设备信息用于后续处理
              while IFS= read -r line; do
                IFS=':' read -ra parts <<< "$line"
                VERSIONS+=("${parts[0]}")
                TARGETS+=("${parts[1]}")
              done < "$file"
            fi
          done
          # 去重处理
          UNIQUE_VERSIONS=($(printf "%s\n" "${VERSIONS[@]}" | sort -u))
          UNIQUE_TARGETS=($(printf "%s\n" "${TARGETS[@]}" | sort -u))
          # 输出到步骤变量
          echo "versions=${UNIQUE_VERSIONS[*]}" >> $GITHUB_OUTPUT
          echo "targets=${UNIQUE_TARGETS[*]}" >> $GITHUB_OUTPUT

      - name: 整理合并固件
        run: |
          mkdir -p final-release
          # 复制所有文件到统一目录
          find all-firmwares -type f -exec cp {} final-release/ \;
          # 合并所有信息文件为统一的 all-build-info.txt
          echo "# 所有固件详细信息" > final-release/all-build-info.txt
          echo "==========================================" >> final-release/all-build-info.txt
          # 遍历所有信息文件并追加内容
          for info_file in $(find all-firmwares -type f -name "*build-info.txt" | grep -v "all-build-info.txt"); do
            if [ -f "$info_file" ]; then
              echo -e "\n$(cat "$info_file")" >> final-release/all-build-info.txt
              echo "==========================================" >> final-release/all-build-info.txt
            fi
          done
          # 删除除all-build-info.txt外的其他build-info.txt文件
          find final-release -type f -name "*build-info.txt" -not -name "all-build-info.txt" -delete
          
          
          #生成release标题
          echo "# OpenWRT 固件汇总发布" > release.txt
          echo "发布时间: $(date +'%Y-%m-%d %H:%M:%S')" >> release.txt
          echo "包含以下版本和设备的固件：" >> release.txt
          echo "- 版本: ${{ steps.extract_version_target.outputs.versions }}" >> release.txt
          echo "- 设备: ${{ steps.extract_version_target.outputs.targets }}" >> release.txt
          echo -e "\n各固件详细信息及MD5请查看 all-build-info.txt 文件" >> release.txt
          echo -e "\n🌐 默认管理IP: 192.168.123.1" >> release.txt

      - name: 生成统一发布标签
        id: tag
        run: |
          echo "release_tag=openwrt-all-firmwares_$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: 发布合并后的Release
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: final-release/*
