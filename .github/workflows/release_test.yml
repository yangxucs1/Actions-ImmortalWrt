name: 单独运行合并发布所有固件

permissions: write-all

on:
  workflow_dispatch:
    # 仅支持手动触发，确保可以独立运行

env:
  TZ: Asia/Shanghai

jobs:
  release-all:
    name: 合并发布所有固件
    runs-on: ubuntu-latest
    # 移除对 build 工作流的依赖，直接运行
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - name: 下载所有构建产物（复用已有 build 产物）
        uses: actions/download-artifact@v4
        with:
          path: all-firmwares
          # 下载仓库中所有未过期的 Artifacts（默认保留90天）

      - name: 下载版本信息
        uses: actions/download-artifact@v4
        with:
          path: version-info-all
          pattern: version_info*

      - name: 检查是否存在构建产物
        run: |
          if [ -z "$(find all-firmwares -type f)" ]; then
            echo "错误：未找到任何构建产物，请先确保 build 工作流已成功运行并生成 Artifacts"
            exit 1
          fi

      - name: 提取版本和目标信息
        id: extract_version_target
        run: |
          echo "所有版本和目标设备信息汇总" > version-info-all.txt
          echo "==========================================" >> version-info-all.txt
          
          VERSIONS=()
          TARGETS=()
          
          for file in $(find version-info-all -type f -name "version_target_*.txt"); do
            if [ -f "$file" ]; then
              cat "$file" >> version-info-all.txt
              echo "==========================================" >> version-info-all.txt
              while IFS= read -r line; do
                IFS=':' read -ra parts <<< "$line"
                VERSIONS+=("${parts[0]}")
                TARGETS+=("${parts[1]}")
              done < "$file"
            fi
          done
          
          UNIQUE_VERSIONS=($(printf "%s\n" "${VERSIONS[@]}" | sort -u))
          UNIQUE_TARGETS=($(printf "%s\n" "${TARGETS[@]}" | sort -u))
          echo "versions=${UNIQUE_VERSIONS[*]}" >> $GITHUB_OUTPUT
          echo "targets=${UNIQUE_TARGETS[*]}" >> $GITHUB_OUTPUT

      - name: 整理合并固件
        run: |
          mkdir -p final-release
          find all-firmwares -type f -exec cp {} final-release/ \;
          
          echo "# 所有固件详细信息" > final-release/all-build-info.txt
          echo "==========================================" >> final-release/all-build-info.txt
          for info_file in $(find all-firmwares -type f -name "*build-info.txt" | grep -v "all-build-info.txt"); do
            if [ -f "$info_file" ]; then
              echo -e "\n$(cat "$info_file")" >> final-release/all-build-info.txt
              echo "==========================================" >> final-release/all-build-info.txt
            fi
          done
          find final-release -type f -name "*build-info.txt" -not -name "all-build-info.txt" -delete
          
          echo "# OpenWRT 固件汇总发布" > release.txt
          echo "发布时间: $(date +'%Y-%m-%d %H:%M:%S')" >> release.txt
          echo "包含以下版本和设备的固件：" >> release.txt
          echo "- 版本: ${{ steps.extract_version_target.outputs.versions }}" >> release.txt
          echo "- 设备: ${{ steps.extract_version_target.outputs.targets }}" >> release.txt
          echo -e "\n各固件详细信息及MD5请查看 all-build-info.txt 文件" >> release.txt
          echo -e "\n🌐 默认管理IP: 192.168.123.1" >> release.txt

      - name: 生成统一发布标签
        id: tag
        run: |
          echo "release_tag=openwrt-all-firmwares_$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: 发布合并后的Release
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: final-release/*

      - name: 保留最新3个Release
        uses: dev-drprasad/delete-older-releases@v0.3.3
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 删除旧的工作流程
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 0
          keep_minimum_runs: 3
